const ErrorHandler = require("../utils/errorHandler");
const catchAsyncError = require("../middleware/catchAsyncError");
const User = require("../models/userModel");
const sendToken = require("../utils/jwtToken");
const sendEmail = require("../utils/sendEmail.js");
const crypto = require("crypto");
const { findOne } = require("../models/userModel");
const req = require("express/lib/request");
const Product = require("../models/productModel");

//---------------------Register A User---------------------

exports.registerUser = catchAsyncError(async (req, res, next) => {
  const { name, email, password } = req.body;

  const user = await User.create({
    name,
    email,
    password,
    avatar: {
      public_id: "this is a sample id",
      url: "profileurl",
    },
  });

  sendToken(user, 200, res);
});

//------------------------Login A User--------------------

exports.loginUser = catchAsyncError(async (req, res, next) => {
  const { email, password } = req.body;

  //step1.checking if user has given password and email both
  if (!email || !password) {
    return next(new ErrorHandler("Please Enter Valid Email and Password", 400));
  }

  //step2.asking user details of entered email address by user
  const user = await User.findOne({ email }).select("+password");

  //step3. checking if user is present in database with given email id
  if (!user) {
    return next(new ErrorHandler("Invalid Email Or Password", 401));
  }

  //step4. Validating password given by user with hashed password in databse
  const isPasswordMatched = await user.comparePassword(password);

  //step5. checking if password given by user matched with hashed pasword stored in database
  if (!isPasswordMatched) {
    return next((new ErrorHandler("Invalid Email Or Password"), 401));
  }

  //calling functon "sendToken" to send Token in browser's cookies generated by server for the user
  sendToken(user, 200, res);
});

//----------------------------LOGOUT A USER----------------

exports.logout = catchAsyncError(async (req, res, next) => {
  res.cookie("token", null, {
    expires: new Date(Date.now()),
    httpOnly: true,
  });

  res.status(200).json({
    success: true,
    message: "Logged Out",
  });
});

//--------------------------FORGOT PASSWORD-----------------

exports.forgotPassword = catchAsyncError(async (req, res, next) => {
  const user = await User.findOne({ email: req.body.email });

  if (!user) {
    return next(new ErrorHandler("User Not Found", 404));
  }

  //Get RestPassword Token

  const resetToken = user.getResetPasswordToken();

  await user.save({ validateBeforeSave: false });

  const resetPasswordUrl = `${req.protocol}://${req.get(
    "host"
  )}/api/v1/password/reset/${resetToken}`;

  const message = `Your Password reset token token is:- \n\n ${resetPasswordUrl} \n\n If You Have Not Requested This Email Then Please Ignore It`;

  try {
    await sendEmail({
      email: user.email,
      subject: `Ecommerce Password Recovery`,
      message,
    });

    res.status(200).json({
      success: true,
      message: `Email Sent To ${user.email} successfully`,
    });
  } catch (error) {
    user.resetPasswordToken = undefined;
    user.resetPasswordExpire = undefined;

    await user.save({ validateBeforeSave: false });

    return next(new ErrorHandler(error.message, 500));
  }
});

//----------------------------RESET PASSWORD--------------------

exports.resetPassword = catchAsyncError(async (req, res, next) => {
  console.log("hi");
  const resetPasswordToken = crypto
    .createHash("sha256")
    .update(req.params.token)
    .digest("hex");
  const user = await User.findOne({
    resetPasswordToken,
    resetPasswordExpire: { $gt: Date.now() },
  });
  if (!user) {
    return next(
      new ErrorHandler("Reset Password Token Is Invali Or Expired", 400)
    );
  }
  if (req.body.password != req.body.confirmPassword) {
    return next(
      new ErrorHandler("Password And ConfirmPasswords Does Not Match "),
      400
    );
  }
  user.password = req.body.password;
  user.resetPasswordToken = undefined;
  user.resetPasswordExpire = undefined;
  await user.save();
  //it will send token to browser
  sendToken(user, 200, res);
});

//----------------------GET USER DETAIL--------------------------

exports.getUserDetails = catchAsyncError(async (req, res, next) => {
  const user = await User.findById(req.user.id);

  res.status(200).json({
    success: true,
    user,
  });
});

//---------------------------UPDATE USER PASSWORD------------------

exports.updatePassword = catchAsyncError(async (req, res, next) => {
  const user = await User.findById(req.user.id).select("+password");

  const isPasswordMatched = await user.comparePassword(req.body.oldPassword);

  if (!isPasswordMatched) {
    return next((new ErrorHandler("Old Password Is Password"), 401));
  }

  if (req.body.newPassword !== req.body.confirmPassword) {
    return next(
      (new ErrorHandler("Password And ConfirmPasswords Does Not Match"), 401)
    );
  }

  user.password = req.body.newPassword;

  await user.save();

  res.status(200).json({
    success: true,
    user,
  });
});

//-----------------------------UPDATE USER PROFILE--------------------

exports.updateProfile = catchAsyncError(async (req, res, next) => {
  const newUserData = {
    name: req.body.name,
    email: req.body.email,
  };

  //We will add cloudinary LATER

  const user = await User.findByIdAndUpdate(req.user.id, newUserData, {
    new: true,
    unValidators: true,
    useFindAndModify: false,
  });

  res.status(200).json({
    success: true,
    user,
  });
});

//-----------------------------GET ALL USER PROFILE--------------------

exports.getAllUser = catchAsyncError(async (req, res, next) => {
  const users = await User.find();

  res.status(200).json({
    success: true,
    users,
  });
});

//------------------------------GET SINGLE USER DEAILS------------------

exports.getSingleUser = catchAsyncError(async (req, res, next) => {
  const user = await User.findById(req.params.id);

  if (!user) {
    return next(
      new ErrorHandler(`User Doesnot Exist With Id :- ${req.params.id}`, 400)
    );
  }

  res.status(200).json({
    success: true,
    user,
  });
});

//----------------------------------UPDATE USER ROLE -------------------------

exports.updateUserRole = catchAsyncError(async (req, res, next) => {
  console.log("jjjj");
  const newUserData = {
    name: req.body.name,
    email: req.body.email,
    role: req.body.role,
  };

  //We will add cloudinary LATER

  const user = await User.findByIdAndUpdate(req.params.id, newUserData, {
    new: true,
    unValidators: true,
    useFindAndModify: false,
  });

  if (!user) {
    return next(
      new ErrorHandler(`User Doesnot Exist With Id :- ${req.user.id}`, 400)
    );
  }

  res.status(200).json({
    success: true,
    user,
  });
});

//----------------------------------DELETE USER-------------------------

exports.deleteUser = catchAsyncError(async (req, res, next) => {
  const user = await User.findByIdAndUpdate(req.params.id);

  if (!user) {
    return next(
      new ErrorHandler(`User Doesnot Exist With Id :- ${req.params.id}`, 400)
    );
  }

  await user.remove();

  res.status(200).json({
    success: true,
    message: "DELETED SUCCESSFULLY",
  });
});

//---------------------------CREATE AND UPDATE PRODUCT REVIEW-----------
exports.createProductReview = catchAsyncError(async (req, res, next) => {
  const { rating, comment, productId } = req.body;

  const review = {
    user: req.user._id,
    name: req.user.name,
    rating: Number(rating),
    comment,
  };

  const product = await Product.findById(productId);

  const isReviewed = product.reviews.find(
    (rev) => rev.user.toString() === req.user._id.toString()
  );

  if (isReviewed) {
    product.reviews.forEach((rev) => {
      if (rev.user.toString() === req.user._id.toString()) {
        (rev.rating = rating), (rev.comment = comment);
      }
    });
  } else {
    product.reviews.push(review);
    product.numOfReviews = product.reviews.length;
  }

  let avg = 0;
  product.reviews.forEach((rev) => {
    avg += rev.rating;
  });
  product.ratings = avg / product.reviews.length;

  await product.save({ validateBeforeSave: false });

  res.status(200).json({
    success: true,
  });
});
